pragma soliditypp ^0.4.5;
contract FullNodeStakeContract {
    address constant voteAddr = "vite_0000000000000000000000000000000000000004d28108e76b";
    tokenId constant viteTokenId = "tti_5649544520544f4b454e6e40";

    mapping(bytes32 => StakeInfo) stakeMap;
    struct StakeInfo {
        address addr;
        uint256 expirationHeight;
        uint256 amount;
    }
    address owner;

    event Stake(address addr, bytes32 id, uint256 amount, uint256 startHeight, uint256 expirationHeight);
    event CancelStake(address addr, bytes32 id, uint256 amount);

    message VoteForSBP(string sbpName);
    message CancelSBPVoting();

    constructor() public {
        send(voteAddr, VoteForSBP("Vite_SBP03"));
        owner = msg.sender;
    }

    onMessage cancelVote() {
        require(msg.sender == owner);
        send(voteAddr, CancelSBPVoting());
    }

    onMessage reVote(string calldata sbpName) {
        require(msg.sender == owner);
        send(voteAddr, VoteForSBP(sbpName));
    }

    onMessage stake() payable {
        require(msg.tokenid == viteTokenId && msg.amount >= 10000 vite);
        uint256 currentHeight = height();
        uint256 expirationHeight = currentHeight + 2592000;
        bytes32 id = fromhash();
        stakeMap[id] = StakeInfo(msg.sender, expirationHeight, msg.amount);
        emit Stake(msg.sender, id, msg.amount, currentHeight, expirationHeight);
    }

    onMessage cancelStake(bytes32 id) {
        StakeInfo storage data = stakeMap[id];
        uint256 currentHeight = height();
        require(data.expirationHeight > 0 && currentHeight >= data.expirationHeight && msg.sender == data.addr);
        address(msg.sender).transfer(viteTokenId, data.amount);
        emit CancelStake(msg.sender, id, data.amount);
        delete stakeMap[id];
    }
}
