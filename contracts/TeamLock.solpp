pragma soliditypp ^0.4.3;

contract TeamLock {
    uint256 nextTime = 1643644800; // start at Feb 1 2022, in seconds
    uint256 interval = 2592000; // 30 days in seconds
    uint256 endTime = 1704038400; // deadline is Jan 1 2024, in seconds
    uint256 unlockAmount = 1500000 vite; // unlock 1.5M per month
    tokenId constant VITE = "tti_5649544520544f4b454e6e40"; // tti of VITE
    uint8 constant MaxOwnerCount = 3; // there can only be a maximum of 3 owners
    
    address benificiary;
    mapping(address => uint256) public owners;
    uint8 ownerCount;
    bool enabled;
    
    constructor(address initOwner, address _benificiary, uint256 _startTime, uint256 _endTime, uint256 _interval, uint256 _unlockAmount) public {
        benificiary = _benificiary;
        // set initial owner
        owners[initOwner] = 1;
        ownerCount = 1;
        enabled = true;
        // only for test
        if (_startTime > 0)
            nextTime = _startTime;
        if (_endTime > 0)
            endTime = _endTime;
        if (_interval > 0)
            interval = _interval;
        if (_unlockAmount > 0)
            unlockAmount = _unlockAmount;
    }

    onMessage () payable {
        // don't accept any transfers if disabled
        require(enabled);
        // only accept VITE token
        require(msg.tokenid == VITE);
    }

    onMessage setBenificiary(address _benificiary) {
        require(enabled); 
        // owners only
        require(owners[msg.sender] == 1);

        benificiary = _benificiary;
    }

    // Lock tokens permanently until a hard fork.
    // Do NOT call this unless the owner's private key is compromised!
    onMessage disable() {
        // owners only
        require(owners[msg.sender] == 1);
        enabled = false;
    }

    onMessage unlock() {
        // lock permanently if disabled
        require(enabled);

        uint256 balanceLeft = balance(VITE);
        require(balanceLeft > 0);

        // check time
        uint256 currentTime = now;
        require(currentTime > nextTime);

        // check deadline
        if(currentTime > endTime) {
            // unlock the remaining after deadline
            benificiary.transfer(VITE, balanceLeft);
            return;
        }

        // unlock monthly
        require(unlockAmount <= balanceLeft);
        benificiary.transfer(VITE, unlockAmount);

        // set nextTime to next month
        nextTime = nextTime + interval;
    }

    onMessage addOwner(address newOwner) {
        require(enabled);
        // owners only
        require(owners[msg.sender] == 1);
        // must add a new address
        require(owners[newOwner] == 0);
        // not allowed to add himself
        require(msg.sender != newOwner);
        // there can only be a maximum of MaxOwnerCount owners
        require(ownerCount < MaxOwnerCount);
        owners[newOwner] = 1;
        ownerCount = ownerCount + 1;
    }

    getter getBenificiary() returns(address) {
        return benificiary;
    }

    getter isOwner(address addr) returns(bool) {
        return owners[addr] == 1;
    }

    getter getNextTime() returns(uint256) {
        return nextTime;
    }

    getter getInterval() returns(uint256) {
        return interval;
    }

    getter getEndTime() returns(uint256) {
        return endTime;
    }

    getter getUnlockAmount() returns(uint256) {
        return unlockAmount;
    }
}