pragma soliditypp ^0.4.2;

/*
 * Token Lockup Contract of Vite Labs Team
 * 20% of VITE coins are held by Vite Labs team and locked 
 * up for 2 years. These part of coins will be unlocked 
 * since 1st Jun 2020, from 1st Jun 2020 to 1st Dec 2020, 
 * 1.5m VITE will be unlocked every 30 days. The rest of 
 * coins will be unlocked on 1st Jan 2022
 */
contract LockToken{
    // Next date of release, devault value is 1st Jun 2020
    uint256 nextTime = 1590940800;
    // Unlock gap: 30d
    uint256 constant interval = 2592000;
    // Complete unlock date: 1st Jan 2022
    uint256 constant stopTime = 1640966400;
    // Unlock amount of VITE in every unlock gap: 1.5m VITE
    uint256 constant perAmount = 1500000 vite;
    // VITE tokenId
    tokenId constant token = "tti_5649544520544f4b454e6e40";
    
    // Administrator Address
    mapping(address => uint256) public ownerMap;
    // Administrators cannot be more than 3
    uint8 constant maxOwnerCount=3;
    // Current administrators
    uint8 ownerCount;
    
    // Deposit coins or not
    bool transfered = false;
    // Deposit address
    address transferAddress;
   

    /*
     * Set contract create account as administrator
     */
    constructor() public {
        ownerMap[msg.sender] = 1;
        ownerCount = 1;
    }

    /*
     * Deposit API, all ( 200m VITE ) lockup coins will be 
     * one-time deposited to deposit address
     */
    onMessage () payable {
        // Only one time allowed
        require(!transfered);
        // Verify amount and token type
        require(msg.amount == 200000000 vite);
        require(msg.tokenid==token);
        // Update deposit status and address
        transfered=true;
        transferAddress=msg.sender;
    }

    /*
     * Withdrawal API
     *
     * Administrator will withdraw 1.5m VITE from contract 
     * and transfer these VITE to deposit address every 30
     * days since 1st Jun 2020.
     * Administrator can one-time withdraw the rest of all
     * VITE and transfer these to deposit address after 
     * 1st Jan 2022.
     */
    onMessage withdraw() {
        // Verify admin auth
        require(ownerMap[msg.sender] == 1);
        // Verify deposited tokens
        require(transfered);
        // Verify contract account balance
        uint256 balanceLeft = balance(token);
        require(balanceLeft > 0);
        // Verify whether can deposit for now
        uint256 currentTime = now;
        require(currentTime>nextTime);
        // One-time unlock the rest of tokens after 1st Jan 2022
        if(currentTime>stopTime) {
            // Transfer the remaining tokens to deposit address
            transferAddress.transfer(token, balanceLeft);
            return;
        }
        // Calculate current locked tokens before 1st Jan 2022
        uint256 times = (currentTime-nextTime)/interval + 1;
        require(times <= 18);
        uint256 transferAmount = times * perAmount;
        // Verify contract account balance
        require(transferAmount<=balanceLeft);
        // Transfer locked tokens to deposit address
        transferAddress.transfer(token, transferAmount);
        // Update next unlock date
        nextTime=nextTime+interval*times;
    }

    /*
     * Add administrator API
     * @param addr New admin's address
     */
    onMessage addOwner(address addr) {
        // Verify administrator's authentication, the account 
        // which send transactions is an administrator and a 
        // newly added account is not an administrator
        require(ownerMap[msg.sender] == 1);
        require(ownerMap[addr] == 0);
        require(msg.sender != addr);
        // Verify administrator's upper limit
        require(ownerCount < maxOwnerCount);
        // Update admin address, current administrators + 1
        ownerMap[addr]=1;
        ownerCount=ownerCount+1;
    }

    /*
     * Delete Administrators 
     * @param addr Address of admin who is prepared to be delete
     */
    onMessage deleteOwner(address addr) {
        // Verify admin auth, both send transactions and delete 
        // account actions are made by administrator, self 
        // delete action is allowed
        require(ownerMap[msg.sender] == 1);
        require(ownerMap[addr] == 1);
        // Administrators > 0 after deletion
        require(ownerCount>1);
        // Delete admin address, current administrators - 1
        ownerMap[addr]=0;
        ownerCount=ownerCount-1;
    }
}